<?php

declare(strict_types=1);

namespace Modules\Xot\Filament\Pages;

use Filament\Actions\Action;
use Filament\Notifications\Notification;
use Filament\Pages\Page;
use Filament\Support\Enums\IconPosition;
use Livewire\Attributes\On;
use Modules\Xot\Actions\ExecuteArtisanCommandAction;
use Modules\Xot\Filament\Traits\NavigationLabelTrait;

class ArtisanCommandsManager extends Page
{
    use NavigationLabelTrait;

    protected static ?string $navigationIcon = 'heroicon-o-command-line';
    protected static string $view = 'xot::filament.pages.artisan-commands-manager';

    public array $output = [];
    public string $currentCommand = '';
    public string $status = '';
    public bool $isRunning = false;

    protected $listeners = [
        'refresh-component' => '$refresh',
        'artisan-command.started' => 'handleCommandStarted',
        'artisan-command.output' => 'handleCommandOutput',
        'artisan-command.completed' => 'handleCommandCompleted',
        'artisan-command.failed' => 'handleCommandFailed',
        'artisan-command.error' => 'handleCommandError',
    ];

    protected function getHeaderActions(): array
    {
        return [
            Action::make('migrate')
                ->label(__('xot::artisan-commands-manager.commands.migrate.label'))
                ->icon('heroicon-o-circle-stack')
                ->color('primary')
                ->size('lg')
                ->iconPosition(IconPosition::Before)
                ->disabled(fn () => $this->isRunning)
                ->action(fn () => $this->executeCommand('migrate')),

            Action::make('filament_upgrade')
                ->label(__('xot::artisan-commands-manager.commands.filament_upgrade.label'))
                ->icon('heroicon-o-arrow-path')
                ->color('warning')
                ->size('lg')
                ->iconPosition(IconPosition::Before)
                ->disabled(fn () => $this->isRunning)
                ->action(fn () => $this->executeCommand('filament:upgrade')),

            Action::make('filament_optimize')
                ->label(__('xot::artisan-commands-manager.commands.filament_optimize.label'))
                ->icon('heroicon-o-sparkles')
                ->color('success')
                ->size('lg')
                ->iconPosition(IconPosition::Before)
                ->disabled(fn () => $this->isRunning)
                ->action(fn () => $this->executeCommand('filament:optimize')),

            Action::make('view_cache')
                ->label(__('xot::artisan-commands-manager.commands.view_cache.label'))
                ->icon('heroicon-o-eye')
                ->color('gray')
                ->size('lg')
                ->iconPosition(IconPosition::Before)
                ->disabled(fn () => $this->isRunning)
                ->action(fn () => $this->executeCommand('view:cache')),

            Action::make('config_cache')
                ->label(__('xot::artisan-commands-manager.commands.config_cache.label'))
                ->icon('heroicon-o-cog-6-tooth')
                ->color('gray')
                ->size('lg')
                ->iconPosition(IconPosition::Before)
                ->disabled(fn () => $this->isRunning)
                ->action(fn () => $this->executeCommand('config:cache')),

            Action::make('route_cache')
                ->label(__('xot::artisan-commands-manager.commands.route_cache.label'))
                ->icon('heroicon-o-map')
                ->color('gray')
                ->size('lg')
                ->iconPosition(IconPosition::Before)
                ->disabled(fn () => $this->isRunning)
                ->action(fn () => $this->executeCommand('route:cache')),

            Action::make('event_cache')
                ->label(__('xot::artisan-commands-manager.commands.event_cache.label'))
                ->icon('heroicon-o-bell')
                ->color('gray')
                ->size('lg')
                ->iconPosition(IconPosition::Before)
                ->disabled(fn () => $this->isRunning)
                ->action(fn () => $this->executeCommand('event:cache')),

            Action::make('queue_restart')
                ->label(__('xot::artisan-commands-manager.commands.queue_restart.label'))
                ->icon('heroicon-o-arrow-path')
                ->color('danger')
                ->size('lg')
                ->iconPosition(IconPosition::Before)
                ->disabled(fn () => $this->isRunning)
                ->action(fn () => $this->executeCommand('queue:restart')),
        ];
    }

    public function executeCommand(string $command): void
    {
        $this->reset(['output', 'status']);
        $this->currentCommand = $command;
        $this->isRunning = true;

        app(ExecuteArtisanCommandAction::class)->execute($command);
    }

    #[On('artisan-command.started')]
    public function handleCommandStarted(string $command): void
    {
        if ($command === $this->currentCommand) {
            $this->status = 'running';
            $this->isRunning = true;
            $this->dispatch('refresh-component');
        }
    }

    #[On('artisan-command.output')]
    public function handleCommandOutput(string $command, string $output): void
    {
        if ($command === $this->currentCommand) {
            $this->output[] = $output;
            $this->dispatch('refresh-component');
        }
    }

    #[On('artisan-command.completed')]
    public function handleCommandCompleted(string $command): void
    {
        if ($command === $this->currentCommand) {
            $this->status = 'completed';
            $this->isRunning = false;
            $this->dispatch('refresh-component');

            Notification::make()
                ->title(__('xot::artisan-commands-manager.messages.command_completed'))
                ->body(__('xot::artisan-commands-manager.messages.command_completed_desc', ['command' => $command]))
                ->success()
                ->send();
        }
    }

    #[On('artisan-command.failed')]
    public function handleCommandFailed(string $command, string $error): void
    {
        if ($command === $this->currentCommand) {
            $this->status = 'failed';
            $this->isRunning = false;
            $this->output[] = $error;
            $this->dispatch('refresh-component');

            Notification::make()
                ->title(__('xot::artisan-commands-manager.messages.command_failed'))
                ->body(__('xot::artisan-commands-manager.messages.command_failed_desc', ['command' => $command]))
                ->danger()
                ->send();
        }
    }

    #[On('artisan-command.error')]
    public function handleCommandError(string $command, string $error): void
    {
        if ($command === $this->currentCommand) {
            $this->status = 'failed';
            $this->isRunning = false;
            $this->output[] = "Error: {$error}";
            $this->dispatch('refresh-component');

            Notification::make()
                ->title(__('xot::artisan-commands-manager.messages.command_failed'))
                ->body($error)
                ->danger()
                ->send();
        }
    }
}
