<?php

namespace XRA\Extend\Traits;

use XRA\Extend\Library\Resource;
use XRA\Extend\Library\SweetAlert;
use Auth;
use Illuminate\Support\Carbon;;
use Illuminate\Http\Request;

trait CrudTrait
{
    /**
     * @param  Request
     * @return [type]
     */
    public function index(Request $request)
    {
        if ($request->routelist == 1) {
            return ArtisanTrait::exe('route:list');
        }
        $params = optional(\Route::current())->parameters();
        $model = $this->getModel();

        if (isset($params['id_page'])) {
            $rows = $model->find($params['id_page']);
        } elseif (isset($params['id_item'])) {
            $rows = $model->find($params['id_item']);
        } elseif (isset($params['id_cat'])) {
            $rows = $model->find($params['id_cat']);
        } else {
            $rows = $model->all();
        }

        $view = $this->getView();
        $plugin = $this->getViewAlias();
        return view($plugin . $view)->with('params', $params)->with('row', $rows);
    }

    public function getView()
    {
        $tmp = \Route::current()->getName();
        $tmp = explode('.', $tmp);
        array_shift($tmp);
        $view = implode('.', $tmp);
        return 'admin.' . $view;
    }

    public function create()
    {
        $params = optional(\Route::current())->parameters();
        $model = $this->getModel();

        $row = $model;
        reset($params);
        foreach ($params as $k => $v){
            $tmp = $this->translateParamToField($k);
            if ($tmp != false) {
                $row->$tmp = $v;
            }
        }

        $view = $this->getView();
        $plugin = $this->getViewAlias();
        return view($plugin . $view)->with('params', $params)->with('row', $row);
    }

    public function store(Request $request)
    {
        $data = $request->all();
        $params = optional(\Route::current())->parameters();
        $model = $this->getModel();
        $row = $model;
        $routename = \Route::current()->getName();
        $route_pieces = explode('.', $routename);
        $route_unique = array_unique($route_pieces);
        $new_routename = implode('.', $route_unique);

        //TODO completare la validazione in modo che alla rilevazione di uno o più errori, ritorni alla pagina di partenza con i rispettivi parametri, altrimenti da giustamente errore.
        //        if (!$row->validate($data)) {
        //            $errors = $row->errors();
        //            return redirect(route(str_replace('.store', '.create', $new_routename), $params))->withInput()->withErrors($errors);
        //        }

        if ($request->input('__submit_cancel') != '') {
            Resource::freeResource($row);
            return SweetAlert::alert('Annullato!', 'La risorsa non è stata creata.', 'red');
        }

        foreach ($request->all() as $k => $v) {
            if (is_array($v)) {
                $v = implode(',', $v);
                $request->merge([$k => $v]);
            }
        }

        $fields = array_keys($row->getAttributes());
        $columns = \Schema::getColumnListing($model->getTable());

        $data = $request->all();
        $myFields = array_intersect($columns, array_keys($data));

        reset($myFields);
        foreach ($myFields as $k => $v){
            if (isset($this->trad) && array_key_exists($v, $this->trad)) {
                $row->$v = $data[$this->trad[$v]];
            } else {
                $row->$v = $data[$v];
            }
        }
        $row->created_by = Auth::user()->handle;
        $row->created_at = Carbon::now();
        $id_tbl_ = $this->getPrimaryKeyWithLang();
        $row->$id_tbl_ = 0;
        $row->save();
        $row->update([$id_tbl_ => $row->id]);

        $act = Resource::manageResource($request, $row);
        $params[$this->getPrimaryKey()] = $row->id;
        \Session::flash('status', 'Risorsa salvata!');

        $act = Resource::manageResource($request, $row);
        if ($act == 'show') {
            return $this->show($request);
        }

        return redirect()->route(str_replace('.store', '.edit', $new_routename), $params);
    }

    public function show(Request $request)
    {
        return;
    }

    public function edit(Request $request)
    {
        $params = optional(\Route::current())->parameters();
        $model = $this->getModel();
        $id = $params[$this->getPrimaryKey()];
        $row = $model->findOrFail($id);
        $view = $this->getView();
        $plugin = $this->getViewAlias();
        return view($plugin . $view)->with('params', $params)->with('row', $row);
    }

    public function update(Request $request)
    {
        $data = $request->all();
        $params = optional(\Route::current())->parameters();
        $model = $this->getModel();
        $id = $params[$this->getPrimaryKey()];
        $row = $model->findOrFail($id);
        $routename = \Route::current()->getName();

        if ($request->input('__submit_cancel') != '') {
            Resource::freeResource($row);
            return SweetAlert::alert('Annullato!', 'La risorsa non è stata modificata.', 'red');
        }

        if (isset($request['page_properties_values_start'])) {
            return $this->uploadPageClassification($request->all(), $params);
        } elseif (isset($request['doc_properties_values_start'])) {
            return $this->uploadDocClassification($request->all(), $params);
        } elseif (isset($request['start_gruppi']) && !isset($request['checkbox_tbl_gruppi'])) {
            $row->checkbox_tbl_gruppi = ',,';
        } elseif (isset($request['start_service']) && !isset($request['checkbox_tbl_service'])) {
            $row->checkbox_tbl_service = ',,';
        }

        //TODO completare la validazione in modo che alla rilevazione di uno o più errori, ritorni alla pagina di partenza con i rispettivi parametri, altrimenti da giustamente errore.
        //        if (!$row->validate($data)) {
        //            $errors = $row->errors();
        //            return redirect(route(str_replace('.update', '.edit', $routename), $params))->withInput()->withErrors($errors);
        //        }

        foreach ($request->all() as $k => $v) {
            if (is_array($v)) {
                $v = implode(',', $v);
                $request->merge([$k => $v]);
            }
        }

        $fields = array_keys($row->getAttributes());
        $data = $request->all();
        $myFields = array_intersect($fields, array_keys($data));

        foreach ($myFields as $k => $v){
            if (isset($this->trad) && array_key_exists($v, $this->trad)) {
                $row->$v = $data[$this->trad[$v]];
            } else {
                $row->$v = $data[$v];
            }
        }
        $row->updated_by = Auth::user()->handle;
        $row->updated_at = Carbon::now();
        $row->save();
        $act = Resource::manageResource($request, $row);
        if ($act == 'show') {
            return $this->show($request);
        }
        return redirect()->route(str_replace('.update', '.edit', $routename), $params);
    }

    public function delete(Request $request)
    {
        $params = optional(\Route::current())->parameters();
        $model = $this->getModel();
        $id = $params[$this->getPrimaryKey()];
        $row = $model->findOrFail($id);
        $view = $this->getView();
        $plugin = $this->getViewAlias();
        return Resource::checkBlock($row) ? SweetAlert::alert("Risorsa bloccata da " . $row->handle) : view($plugin . $view)->with('row', $row)->with('params', $params);
    }

    public function destroy(Request $request)
    {
        $params = optional(\Route::current())->parameters();
        $model = $this->getModel();


        $id = $params[$this->getPrimaryKey()];
        $row = $model->findOrFail($id);

        /*
        if(isset($params['id_cat']) || isset($params['id_menu'])){
            $childs = $model->where('id_'.$model->getTable(), $row->id)->get();
            $childsCat = $model->where('id_padre', $row->id)->get();
        }

        if(isset($childs)){
            foreach ($childs as $child){
                $child->deleted_at = Carbon::now();
                $child->deleted_by = Auth::user()->handle;
                $child->save();
            }
        }
        if(isset($childsCat)){
            foreach($childsCat as $childCat){
                $childCat->deleted_at = Carbon::now();
                $childCat->deleted_by = Auth::user()->handle;
                $childsCat->save();
            }
        }*/

        $row->deleted_at = Carbon::now();
        $row->deleted_by = Auth::user()->handle;
        $row->update();
        return SweetAlert::alert('Eliminata!', 'Risorsa eliminata, la potrai recuperare in seguito dal cestino.', 'green');
    }

    // TODO migliorare il destroy, in modo che cancellando una categoria o menu, cancelli ricorsivamente anche tutti i suoi figlio (categorie e non)

    public function dupplica()
    {
        $params = optional(\Route::current())->parameters();
        $model = $this->getModel();
        $id = $params[$this->getPrimaryKey()];
        $row = $model->findOrFail($id)->toArray();
        array_shift($row);
        $duplicateRow = new $model;

        foreach ($row as $k => $v) {
            $duplicateRow[$k] = $v;
        }
        $id_tbl_ = $this->getPrimaryKeyWithLang();
        $duplicateRow->save();
        $duplicateRow->update([$id_tbl_ => $duplicateRow->id]);
        echo "<script>$('#folderTree').jstree(true).refresh(); </script>";
        return SweetAlert::alert('Successo!', 'Risorsa dupplicata correttamente.', 'green');
    }

    private function getTitleFromModel($model)
    {
        return;
    }

    private function getRouteFromModel($model)
    {
        return;
    }

    public function rename()
    {
        $params = optional(\Route::current())->parameters();
        $model = $this->getModel();
        $id = $params[$this->getPrimaryKey()];
        $row = $model->findOrFail($id);
        $view = $this->getView();
        $plugin = $this->getViewAlias();
        return view($plugin . $view)->with('params', $params)->with('row', $row);
    }

    public function postRename(Request $request)
    {
        $params = optional(\Route::current())->parameters();
        $model = $this->getModel();
        $id = $params[$this->getPrimaryKey()];
        $row = $model->findOrFail($id);
        $routename = \Route::current()->getName();

        foreach ($request->all() as $k => $v) {
            if (is_array($v)) {
                $v = implode(',', $v);
                $request->merge([$k => $v]);
            }
        }

        $fields = array_keys($row->getAttributes());
        $data = $request->all();
        $myFields = array_intersect($fields, array_keys($data));

        foreach ($myFields as $k => $v){
            if (isset($this->trad) && array_key_exists($v, $this->trad)) {
                $row->$v = $data[$this->trad[$v]];
            } else {
                $row->$v = $data[$v];
            }
        }
        $row->updated_by = Auth::user()->handle;
        $row->updated_at = Carbon::now();
        $row->save();
        return SweetAlert::alert('Successo!', 'Risorsa rinominata correttamente.', 'green');
    }
}
